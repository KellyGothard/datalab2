dim(pll2pJags)
waic0pJags <- waic(pll0pJags)
waic2pJags <- waic(pll2pJags)
loo_compare(waic0pJags, waic2pJags)
install.packages("nimble")
library(nimble)
toy2pNimble <- nimbleCode({
sdp ~ dunif(1e-04, 1)
sdo ~ dunif(1e-04, 1)
z[1] ~ dnorm(z0,sd=sdp)
y[1] ~ dnorm(z[1],sd=sdo)
for (i in 2:TT){
z[i] ~ dnorm(z[i - 1], sd = sdp)
y[i] ~ dnorm(z[i], sd=sdo)
}})
dataNimble <- list(y = y)
init2pNimble <- list(
sdp = sdp,
sdo = sdo
)
const2pNimble <- list(
TT = TT,
z0 = 0
)
m2pNimble <- nimbleModel(toy2pNimble,
data = dataNimble,
constants = const2pNimble,
inits = init2pNimble,
check = FALSE)
comp2pNimble <- compileNimble(m2pNimble)
nimbleOptions(showCompilerOutput = TRUE)
comp2pNimble <- compileNimble(m2pNimble)
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
library(devtools)
install.packages("devtools")
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
comp2pNimble <- compileNimble(m2pNimble)
devtools::install_github("r-lib/devtools")
comp2pNimble <- compileNimble(m2pNimble)
library(rstan)
hessian <- function(funfcn,x,y,delta){
# function to calculate the hessian of funfcn at x
t <- length(x)
h <- matrix(0, t, t)
Dx <- delta*diag(t)
for (i in 1:t) {
for (j in 1:i) {
h[i,j] <- (do.call("funfcn",list(x+Dx[i,]+Dx[j,],y)) # LL with
- do.call("funfcn",list(x+Dx[i,]-Dx[j,],y))
- do.call("funfcn",list(x-Dx[i,]+Dx[j,],y))
+ do.call("funfcn",list(x-Dx[i,]-Dx[j,],y)))/(4*delta^2)
h[j,i] <- h[i,j]
}
}
return(h)
}
mfx <- function(theta) {
dlm(m0 = 0, C0 = 0,
GG = theta[1]*theta[2], W = 0.1^2,
FF = theta[3],V = 0.1^2)
}
likfx <- function(theta,y) {
RW.obj <- mfx(theta)
dlmLL(y = y, mod = RW.obj)
}
ffx <- dlmMLE(y = y, parm = c(1,1,1),
build = mfx)
library(dlm)
ffx <- dlmMLE(y = y, parm = c(1,1,1),
build = mfx)
results <- hessianmethod(likfx, ffx$par, y, 0.00001)
hessianmethod <- function(funfcn,pars,y,delta,print=TRUE){
# Applies the Hessian method
# funfcn - function which return negative loglikelihood
# pars - parameter values at which hessian is evaluated
# y - data to be passed into likelihood
# delta - error used in calculating Hessian and cutt-off
# suggested value delta = 0.00001
# cut-off used delta*p, where p is no. pars
cutoff <- delta*length(pars)
# Finds hessian matrix
h <- do.call("hessian",list(funfcn,pars,y,delta))
# Calculates eigenvalues
E <- eigen(h)
# find standardised eigenvalues
standeigenvalues <- abs(E$values)/max(abs(E$values))
# find number of estimable parameters
# number of parameters with eigenvalues below the cutoff
noestpars <- 0
for (i in 1:length(pars)) {
if (standeigenvalues[i] > cutoff) {
noestpars <- noestpars + 1
}
}if (print) {
# Prints whether model is parameter redundant or not
# Then prints smallest eigenvalue and
# number of estimable parameters
if (min(standeigenvalues) < cutoff) {
cat("model is non-identifiable or parameter redundant")
}
else {
cat("model is identifiable or not parameter redundant")
}
cat("nn")
cat(
'smallest standardized eigenvalue'
,min(standeigenvalues))
cat("nn")
cat(
'number of estimable parameters'
,noestpars)
}
result <- list(standeigenvalues=standeigenvalues,noestpars=noestpars)
return(result)
}
hessianmethod <- function(funfcn,pars,y,delta,print=TRUE){
# Applies the Hessian method
# funfcn - function which return negative loglikelihood
# pars - parameter values at which hessian is evaluated
# y - data to be passed into likelihood
# delta - error used in calculating Hessian and cutt-off
# suggested value delta = 0.00001
# cut-off used delta*p, where p is no. pars
cutoff <- delta*length(pars)
# Finds hessian matrix
h <- do.call("hessian",list(funfcn,pars,y,delta))
# Calculates eigenvalues
E <- eigen(h)
# find standardised eigenvalues
standeigenvalues <- abs(E$values)/max(abs(E$values))
# find number of estimable parameters
# number of parameters with eigenvalues below the cutoff
noestpars <- 0
for (i in 1:length(pars)) {
if (standeigenvalues[i] > cutoff) {
noestpars <- noestpars + 1
}
}
if (print) {
# Prints whether model is parameter redundant or not
# Then prints smallest eigenvalue and
# number of estimable parameters
if (min(standeigenvalues) < cutoff) {
cat("model is non-identifiable or parameter redundant")
}
else {
cat("model is identifiable or not parameter redundant")
}
cat("nn")
cat('smallest standardized eigenvalue',min(standeigenvalues))
cat("nn")
cat('number of estimable parameters',noestpars)
}
result <- list(standeigenvalues=standeigenvalues,noestpars=noestpars)
return(result)
}
results <- hessianmethod(likfx, ffx$par, y, 0.00001)
mfx <- function(theta) {
dlm(m0 = 0, C0 = 0,
GG = theta[1], W = 0.1^2,
FF = theta[2], V = 0.1^2)
}
# Find the MLE
ffx <- dlmMLE(y = y, parm = c(1,1),
build = mfx)
# Check identifiability using the Hessian method
results <- hessianmethod(likfx, ffx$par, y, 0.00001)
# Read the data
dataPbA <- read.csv("Data/PB_Argos.csv")
cat("#include <R.h>
void hello (void) {
Rprintf(\"hello world!\\n\");
}",file="hello.c")
system("R CMD SHLIB hello.c")
dyn.load(paste0("hello",.Platform$dynlib.ext))
.C("hello",PACKAGE="hello")
find_rtools()
??find_rtools
check_rtools()
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
cat("#include <R.h>
+ void hello (void) {
+ Rprintf(\"hello world!\\n\");
+ }",file="hello.c")
system("R CMD SHLIB hello.c")
?Rtools
??Rtools
library(plyr)
library(tidyverse)
setwd("c:/users/beasley/documents/datalab2")
# Load data -----------------------------------------
inits <- read.table("smac/triggernaclean.csv", sep = ",", header = T,
stringsAsFactors = F)
followup <- read.table("smac/followupclean.csv", sep = ",", header = T,
stringsAsFactors = F)
# Select columns with disease data; data cleaning --------------------------------
inits %>%
select(Trig_date, District, Chiefdom, Name_of_community, Male_child:Total_female,
ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
select(Trig_date, District, Chiefdom, Name_of_community, Total_all, Sick_all,
Deaths_all) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Population = sum(Total_all), Sick = sum(Sick_all),
Deaths = sum(Deaths_all)) %>%
na.omit() %>%
mutate(PercSick = Sick/Population, PercDead = Deaths/Population) %>%
add_column(Visit = "Trigger") %>%
{. ->> smol.inits}
followup %>%
select(Date_of_visit, District, Name_of_community, Chiefdom, Male_Child:Total_female,
ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
select(Date_of_visit, District, Chiefdom, Name_of_community, Total_all, Sick_all,
Deaths_all) %>%
group_by(District, Chiefdom, Name_of_community) %>%
mutate(Date_of_visit = as.Date(Date_of_visit, '%Y-%m-%d')) %>%
distinct(District, Chiefdom, Name_of_community, .keep_all = T) %>%
summarise(Population = sum(Total_all), Sick = sum(Sick_all),
Deaths = sum(Deaths_all))%>%
na.omit() %>%
mutate(PercSick = Sick/Population, PercDead = Deaths/Population) %>%
add_column(Visit = "1stFollowup") %>%
{. ->> smol.followup}
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Name_of_community, Chiefdom) %>%
na.omit() %>%
group_by(District, Chiefdom, Name_of_community) %>%
{. ->> followup.counts}
head.followup.counts
head(followup.counts)
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Name_of_community, Chiefdom) %>%
na.omit() %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n()) %>%
{. ->> followup.counts}
qplot(data = followup.counts, x = District, geom = "jitter")
qplot(data = followup.counts, x = District, y = Nvisit, geom = "jitter")
followup.counts[which(followup.counts$Name_of_community == " ")]
followup.counts[which(followup.counts$Name_of_community == "")]
# Variation in number of visits
ggplot(data = followup.counts, aes(x = District, y = Nvisit))+
geom_jitter(alpha = 0.5)
# Variation in number of visits
ggplot(data = followup.counts, aes(x = District, y = Nvisit))+
geom_jitter(alpha = 0.3)
# Variation in number of visits
ggplot(data = followup.counts, aes(x = District, y = Nvisit))+
geom_jitter(alpha = 0.3)+
scale_y_discrete(expand = c(0,0))
# Variation in number of visits
ggplot(data = followup.counts, aes(x = District, y = Nvisit))+
geom_jitter(alpha = 0.3)+
scale_y_continuous(expand = c(0,0))
# Variation in number of visits
ggplot(data = followup.counts, aes(x = District, y = Nvisit))+
geom_jitter(alpha = 0.3)+
scale_y_continuous(expand = c(0,0))+
labs(y = "Number of Follow-ups")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
ggsave("nfollowup.jpeg", width = 10, height = 5, units = "in")
ggsave("nfollowup.jpeg", width = 11, height = 5, units = "in")
# Get number of follow up visits per community
followup %>%
select(Trig_date, District, Chiefdom, Name_of_community, Male_child:Total_female,
ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
na.omit() %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n()) %>%
{. ->> followup.counts}
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
na.omit() %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n()) %>%
{. ->> followup.counts}
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_Child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
na.omit() %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n()) %>%
{. ->> followup.counts}
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_Child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n()) %>%
{. ->> followup.counts}
is.na(followup.counts$Name_of_community)
sum(is.na(followup.counts$Name_of_community))
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_Child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n()) %>%
{. ->> followup.counts}
# Variation in number of visits
ggplot(data = followup.counts, aes(x = District, y = Nvisit))+
geom_jitter(alpha = 0.3)+
scale_y_continuous(expand = c(0,0))+
labs(y = "Number of Follow-ups")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = PercSick))+
geom_point()
?summarise()
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_Child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n(), .keep_all = T) %>%
{. ->> followup.counts}
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_Child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n(), mean.sick = mean(Sick_all),
mean.dead = mean(Deaths_all)) %>%
{. ->> followup.counts}
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_point()
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_bar()
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_jitter()
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_jitter()+
scale_x_continuous()
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_jitter(alpha = 0.3)+
scale_x_continuous()
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_Child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n(), mean.sick = mean(Sick_all/Total_all),
mean.dead = mean(Deaths_all/Total_all)) %>%
{. ->> followup.counts}
# Variation in number of visits
ggplot(data = followup.counts, aes(x = District, y = Nvisit))+
geom_jitter(alpha = 0.3)+
scale_y_continuous(expand = c(0,0))+
labs(y = "Number of Follow-ups")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_jitter(alpha = 0.3)+
labs(y = "Number of Follow-ups")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_jitter(alpha = 0.3)+
labs(y = "Proportion Sick")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
# Does number of follow-ups correlate with sicknesses or deaths?
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.sick))+
geom_jitter(alpha = 0.3)+
labs(y = "Proportion Sick", x = "Number of Follow-ups")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
ggsave("followupsickness.jpeg", width = 7, height = 5, units = "in")
ggplot(data = followup.counts, aes(x = Nvisit, y = mean.dead))+
geom_jitter(alpha = 0.3)+
labs(y = "Proportion Dead", x = "Number of Follow-ups")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
ggsave("followupdead.jpeg", width = 7, height = 5, units = "in")
# Variation in sample size
ggplot(data = smol, aes(x = District, fill = Visit))+
geom_bar(position = position_dodge(preserve = "single"))+
scale_fill_manual(values = c("grey30", "gray75"))+
scale_y_continuous(expand = c(0,0))+
labs(y = "Observations")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
# Combine dataframes
smol <- rbind(smol.inits, smol.followup)
# Factor visit column for neater plots
smol$Visit <- factor(smol$Visit, levels = c("Trigger", "1stFollowup"))
smol <- smol[-which(smol$PercSick > 1),]
smol <- smol[-which(smol$PercDead > 1),]
# Variation in sample size
ggplot(data = smol, aes(x = District, fill = Visit))+
geom_bar(position = position_dodge(preserve = "single"))+
scale_fill_manual(values = c("grey30", "gray75"))+
scale_y_continuous(expand = c(0,0))+
labs(y = "Observations")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
inits <- read.table("smac/triggernaclean.csv", sep = ",", header = T,
stringsAsFactors = F)
followup <- read.table("smac/followupclean.csv", sep = ",", header = T,
stringsAsFactors = F)
# Select columns with disease data; data cleaning --------------------------------
inits %>%
select(Trig_date, District, Chiefdom, Name_of_community, Male_child:Total_female,
ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
select(Trig_date, District, Chiefdom, Name_of_community, Total_all, Sick_all,
Deaths_all) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Population = sum(Total_all), Sick = sum(Sick_all),
Deaths = sum(Deaths_all)) %>%
na.omit() %>%
mutate(PercSick = Sick/Population, PercDead = Deaths/Population) %>%
add_column(Visit = "Trigger") %>%
{. ->> smol.inits}
followup %>%
select(Date_of_visit, District, Name_of_community, Chiefdom,
Male_Child:Total_female, ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
select(Date_of_visit, District, Chiefdom, Name_of_community, Total_all, Sick_all,
Deaths_all) %>%
group_by(District, Chiefdom, Name_of_community) %>%
mutate(Date_of_visit = as.Date(Date_of_visit, '%Y-%m-%d')) %>%
distinct(District, Chiefdom, Name_of_community, .keep_all = T) %>%
summarise(Population = sum(Total_all), Sick = sum(Sick_all),
Deaths = sum(Deaths_all))%>%
na.omit() %>%
mutate(PercSick = Sick/Population, PercDead = Deaths/Population) %>%
add_column(Visit = "1stFollowup") %>%
{. ->> smol.followup}
# Get number of follow up visits per community
followup %>%
select(Date_of_visit, District, Chiefdom, Name_of_community,
Male_Child:Total_female,ss_mc:cb_fa) %>%
mutate(Total_all = Total_male+Total_female) %>%
mutate(Sick_all = ss_mc+ss_fc+ss_ma+ss_fa) %>%
mutate(Deaths_all = d_mc+d_fc+d_ma+d_fa) %>%
group_by(District, Chiefdom, Name_of_community) %>%
summarise(Nvisit = n(), mean.sick = mean(Sick_all/Total_all),
mean.dead = mean(Deaths_all/Total_all)) %>%
{. ->> followup.counts}
# Remove followup data that doesn't exist in the inits
smol.followup <- match_df(smol.followup, smol.inits, on = c('District', 'Chiefdom',
'Name_of_community'))
# Combine dataframes
smol <- rbind(smol.inits, smol.followup)
unique(smol$Visit)
# Factor visit column for neater plots
smol$Visit <- factor(smol$Visit, levels = c("Trigger", "1stFollowup"))
smol <- smol[-which(smol$PercSick > 1),]
smol <- smol[-which(smol$PercDead > 1),]
# Variation in sample size
ggplot(data = smol, aes(x = District, fill = Visit))+
geom_bar(position = position_dodge(preserve = "single"))+
scale_fill_manual(values = c("grey30", "gray75"))+
scale_y_continuous(expand = c(0,0))+
labs(y = "Observations")+
theme_bw(base_size = 18)+
theme(panel.grid = element_blank())
ggsave("obsbydist.jpeg", width = 10, height = 5, units = "in")
